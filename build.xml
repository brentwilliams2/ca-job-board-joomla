<?xml version="1.0" encoding="utf-8"?>
<project default="build">
  <!-- Get a nice timestamp to put in the filename -->
  <tstamp>
    <format property="version" pattern="%Y%m%d_%H%M"/>
  </tstamp>

  <!-- Pull in project properties file -->
  <property file="build.properties"  override="true"/>

  <!-- Set some default parameters -->
  <property name="build.dir"    value="build" />
  <property name="release.dir"  value="releases" />

  <!-- PREPARE: Set up the environment for creating a distribution package -->
  <target name="prepare">
    <phingcall target="clean" />
    <mkdir dir="${release.dir}" />
  </target>

  <!-- CLEAN: Clean the build directory -->
  <target name="clean">
    <available file="${build.dir}" type="dir" property="target.available" value="true" />
    <if>
      <istrue value="${target.available}" />
      <then>
        <delete dir="${build.dir}" />
        <mkdir dir="${build.dir}" />
      </then>
    </if>
  </target>

  <!-- BUILD: Build the package -->
  <target name="build" depends="prepare">
    <!-- BUILD: Call Component Build Tasks -->
    <if>
      <istrue value="${project.components}"/>
      <then>
        <property name="build.work" value="true" />
        <foreach list="${project.components}" param="componentname" target="component" />
      </then>
    </if>

    <!-- BUILD: Call Library Build Tasks -->
    <if>
      <istrue value="${project.libraries}"/>
      <then>
        <property name="build.work" value="true" />
        <foreach list="${project.libraries}" param="libraryname" target="library" />
      </then>
    </if>

    <!-- BUILD: Call Modules Build Tasks -->
    <if>
      <istrue value="${project.modules}"/>
      <then>
        <property name="build.work" value="true" />
        <foreach list="${project.modules}" param="modulename" target="module" />
      </then>
    </if>

    <!-- BUILD: Call Plugins Build Tasks -->
    <if>
      <istrue value="${project.plugins}"/>
      <then>
        <property name="build.work" value="true" />
        <foreach list="${project.plugins}" param="pluginname" target="plugin" />
      </then>
    </if>

    <!-- BUILD: Call Templates Build Tasks -->
    <if>
      <istrue value="${project.templatess}"/>
      <then>
        <property name="build.work" value="true" />
        <foreach list="${project.templates}" param="templatename" target="templates" />
      </then>
    </if>

    <!-- BUILD: Call Package Build Task -->
    <if>
      <istrue value="${build.work}"/>
      <then>
        <phingcall target="package">
      </then>
      <else>
        <echo msg="No extensions were built, so no package built..." />
      </else>
    </if>
  </target>


    <phingcall target="archive">
        <property name="extension" value="com" />
        <property name="name" value="${componentname}" />
    </phingcall>


  <!-- UTIL: Create extension archives from the build folder -->
  <target name="archive">
    <property name="archive.dir"  value="${build.dir}/${extension}_${name}_${version}" />
    <echo msg="Creating archive file for ${extension}_${name}..." />

    <mkdir  dir="archive.dir" />

    <copy todir="archive.dir">
      <fileset dir="${extension}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <reflexive>
      <fileset dir="archive.dir">
        <include pattern="${project.manifest}.xml"/>
      </fileset>
      <filterchain>
        <replaceregexp>
          <regexp pattern="\[VERSION\]" replace="${version}"/>
        </replaceregexp>
      </filterchain>
    </reflexive>

    <zip destfile="${release.dir}/${extension}_${name}_${version}.zip">
      <fileset dir="archive.dir" >
        <include name="**/*"/>
      </fileset>
    </zip>
  </target>

  <!-- UTIL: Check if the extension has a media folder and copy it -->
  <target name="media">
    <available file="${source.dir}/media/${extension}" type="dir" property="source.media.available" value="true" />
    <if>
      <equals arg1="${source.media.available}" arg2="1" />
      <then>
        <copy todir="${build.dir}/${extension}/media" haltonerror="false">
          <fileset dir="${source.dir}/media/${extension}">
            <include name="**/*"/>
          </fileset>
        </copy>
      </then>
    </if>
  </target>

  <!-- MODULES: Build target for modules -->
  <target name="module">

    $this->project->setProperty("project.type", "module");
    $this->project->setProperty("project.dir", implode("_", $arr));
    $this->project->setProperty("project.manifest", implode("_", $arr));
    if($arr[1] == 'admin'){
      $this->project->setProperty("project.client", "admin");
    }

    <!-- MODULES: First we check if the extension has a media folder -->
    <phingcall target="media" />

    <!-- MODULES: Add the administrator prefix if this is an admin extension -->
    <if>
      <equals arg1="${project.client}" arg2="admin" />
      <then>
        <property name="source.dir" value="${source.dir}/administrator/modules/${project.dir}" override="true"/>
      </then>
      <else>
        <property name="source.dir" value="${source.dir}/modules/${project.dir}" override="true" />
      </else>
    </if>

    <!-- MODULES: Now use the updated source.dir property to copy the source files -->
    <available file="${source.dir}" type="dir" property="source.available" value="true" />
    <if>
      <equals arg1="${source.available}" arg2="1" />
      <then>
        <echo msg="Building module from source tree ${source.dir}" />
        <copy todir="${build.dir}/${extension}" haltonerror="false">
          <fileset dir="${source.dir}">
            <include name="**/*"/>
          </fileset>
        </copy>
      </then>
      <else>
        <fail msg="Source folder does not exist ${source.dir}" />
      </else>
    </if>

    <!-- MODULES: Now that we have built the extension put it back into the repository -->
    <phingcall target="clean" />
  </target>

  <!-- COMPONENTS: Build target for components -->
  <target name="component">

    $this->project->setProperty("project.name", $str);
    $this->project->setProperty("project.type", "component");
    $this->project->setProperty("project.dir", implode("_", $arr));
    $this->project->setProperty("project.manifest", implode("_", array_slice($arr, 1)));

    <!-- COMPONENTS: First we check if the extension has a media folder -->
    <phingcall target="media" />

    <copy todir="${build.dir}/${extension}/site" haltonerror="false">
      <fileset dir="${source.dir}/components/${project.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${build.dir}/${extension}/admin" haltonerror="false">
      <fileset dir="${source.dir}/administrator/components/${project.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- COMPONENTS: Move the manifest to the parent directory -->
    <move file="${build.dir}/${extension}/admin/${project.manifest}.xml" todir="${build.dir}/${extension}" />

    <!-- COMPONENTS: Move the installer script if it exists -->
    <available file="${build.dir}/${extension}/admin/script.php" type="file" property="script.available" value="true" />
    <if>
      <equals arg1="${script.available}" arg2="1" />
      <then>
        <move file="${build.dir}/${extension}/admin/script.php" todir="${build.dir}/${extension}" />
      </then>
    </if>

    <!-- COMPONENTS: Now that we have built the extension put it back into the repository -->
    <phingcall target="clean" />
  </target>

  <!-- PLUGINS: Build target for plugins -->
  <target name="plugin">

    $this->project->setProperty("project.type", "plugin");
    $this->project->setProperty("plugin.group", $arr[1]);
    $this->project->setProperty("project.dir", implode("_", array_slice($arr, 2)));
    $this->project->setProperty("project.manifest", implode("_", array_slice($arr, 2)));

    <!-- PLUGINS: First we check if the extension has a media folder -->
    <phingcall target="media" />

    <!-- PLUGINS: Source -->
    <property name="code.dir" value="${source.dir}/plugins/${plugin.group}/${project.dir}" override="true"/>
    <available file="${code.dir}" type="dir" property="source.available" value="true" />
    <if>
    <equals arg1="${source.available}" arg2="1" />
    <then>
      <echo msg="Building plugin from source tree ${code.dir}" />
      <copy todir="${build.dir}/${extension}" haltonerror="false">
        <fileset dir="${code.dir}">
          <include name="**/*"/>
        </fileset>
      </copy>
    </then>
    <else>
        <fail msg="Source folder does not exist ${code.dir}" />
    </else>
    </if>

    <!-- PLUGINS: Languages -->
    <property name="language.dir" value="${source.dir}/administrator/language" override="false"/>

    <copy todir="${build.dir}/${extension}/language" haltonerror="false">
      <fileset dir="${language.dir}">
        <include name="**/*.${extension}.*"/>
      </fileset>
    </copy>

    <!-- PLUGINS: Now that we have built the extension put it back into the repository -->
    <phingcall target="clean" />
  </target>

  <!-- LIB: Build target for libraries -->
  <target name="library">

    $this->project->setProperty("project.name", $str);
    $this->project->setProperty("project.type", "library");
    $this->project->setProperty("project.dir", $arr[1]);
    $this->project->setProperty("project.manifest", $arr[1]);

    <!-- LIB: First we check if the extension has a media folder -->
    <phingcall target="media" />

    <copy todir="${build.dir}/${extension}" haltonerror="false">
      <fileset dir="${source.dir}/libraries/${project.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${build.dir}/${extension}" haltonerror="true">
      <fileset dir="${source.dir}/administrator/manifests/libraries">
        <include name="${project.manifest}.xml" />
      </fileset>
    </copy>

    <!-- LIB: Source -->
    <property name="code.dir" value="${source.dir}/libraries/${project.dir}" override="false"/>
    <copy todir="${build.dir}/${extension}/${project.dir}" haltonerror="false">
      <fileset dir="${code.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- LIB: Manifest -->
    <property name="manifest.dir" value="${source.dir}/administrator/manifests/libraries" override="false"/>
    <copy todir="${build.dir}/${extension}" haltonerror="false">
      <fileset dir="${manifest.dir}">
        <include name="${project.manifest}.xml"/>
      </fileset>
    </copy>

    <!-- LIB: Languages -->
    <property name="language.dir" value="${source.dir}/language" override="false"/>
    <copy todir="${build.dir}/${extension}/language" haltonerror="false">
      <fileset dir="${language.dir}">
        <include name="**/*.${extension}.*"/>
      </fileset>
    </copy>

    <!-- LIB: Now that we have built the extension put it back into the repository -->
    <phingcall target="clean" />
  </target>

  <!-- TEMPLATES: Build target for templates -->
  <target name="template">

    $this->project->setProperty("project.type", "template");
    $this->project->setProperty("project.dir", implode("_", array_slice($arr, 1)));
    $this->project->setProperty("project.manifest", "templateDetails.xml");
    if($arr[1] == 'admin'){
      $this->project->setProperty("project.client", "admin");
    }

    <!-- Needs to compile SCSS -->


    <if>
      <equals arg1="${project.client}" arg2="admin" />
      <then>
        <property name="source.dir" value="${source.dir}/administrator/templates/${project.dir}" override="true"/>
      </then>
      <else>
        <property name="source.dir" value="${source.dir}/templates/${project.dir}" override="true" />
      </else>
    </if>
    <available file="${source.dir}" type="dir" property="source.available" value="true" />
    <if>
      <equals arg1="${source.available}" arg2="1" />
      <then>
        <echo msg="Building template from source tree ${source.dir}" />
        <copy todir="${build.dir}/${extension}" haltonerror="false">
          <fileset dir="${source.dir}">
            <include name="**/*"/>
          </fileset>
        </copy>
      </then>
      <else>
        <fail msg="Source folder does not exist ${source.dir}" />
      </else>
    </if>
    <!-- TEMPLATES: Now that we have built the extension put it back into the repository -->
    <phingcall target="clean" />
  </target>

  <!-- PACKAGE: Build target for final package -->
  <target name="package">
    <phingcall target="clean" />
  </target>
</project>